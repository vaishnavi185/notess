{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\HP\\\\Desktop\\\\pen_down\\\\pen\\\\src\\\\Components\\\\Adminpanel.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Card from './card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Adminpanel() {\n  _s();\n  const [title, setTitle] = useState(\"\");\n  const [file, setFile] = useState(null);\n  const [alertMessage, setAlertMessage] = useState(\"\");\n  const [uploadedFiles, setUploadedFiles] = useState([]); // List of PDFs fetched from the backend\n\n  // Fetch list of uploaded PDFs when the component mounts\n  useEffect(() => {\n    const fetchPdfs = async () => {\n      try {\n        const response = await axios.get('http://localhost:9029/api/user/pdf');\n        if (response.status === 200) {\n          console.log('Fetched files:', response.data); // Debugging: log the fetched data\n          setUploadedFiles(response.data); // Assuming the response is an array of files\n        } else {\n          console.error('Failed to fetch files:', response);\n        }\n      } catch (error) {\n        console.error('Error fetching uploaded files:', error);\n      }\n    };\n    fetchPdfs();\n  }, []); // Runs once when the component mounts\n\n  // Handle form submission for file upload\n  const onSubmit = async e => {\n    e.preventDefault();\n    if (!file) {\n      setAlertMessage(\"Please select a file to upload.\");\n      return;\n    }\n    const formData = new FormData();\n    formData.append('title', title);\n    formData.append('file', file);\n    const token = localStorage.getItem('token');\n    if (!token) {\n      setAlertMessage(\"Token not found. Please log in.\");\n      return;\n    }\n    try {\n      const result = await axios.post('http://localhost:9029/api/user/upload-pdf', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data',\n          Authorization: `Bearer ${token}`\n        }\n      });\n      console.log('Upload successful:', result.data);\n      setAlertMessage(\"Your file has been uploaded successfully!\");\n      setTitle(\"\");\n      setFile(null);\n\n      // Re-fetch uploaded files to update the list after a successful upload\n      const updatedFiles = await axios.get('http://localhost:9029/api/user/pdf', {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n      setUploadedFiles(updatedFiles.data);\n    } catch (error) {\n      console.error('Error uploading PDF:', error);\n      setAlertMessage(\"Error uploading PDF.\");\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Upload Notes Here\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), alertMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"alert alert-success\",\n      children: alertMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 24\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"form-floating mb-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"form-control\",\n        id: \"floatingInput\",\n        placeholder: \"Title\",\n        value: title,\n        onChange: e => setTitle(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"floatingInput\",\n        children: \"Enter PDF title\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"row g-3\",\n      onSubmit: onSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-auto\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"fileInput\",\n          children: \"Select file for upload\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"file\",\n          className: \"form-control\",\n          id: \"fileInput\",\n          onChange: e => setFile(e.target.files[0])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn btn-primary\",\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"mt-4\",\n      children: \"Uploaded Files:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), uploadedFiles.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"list-group\",\n      children: uploadedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(Card, {\n          title: file.title,\n          pdf: file.pdf\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }, this), \"  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 15\n        }, this)]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No files uploaded yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n_s(Adminpanel, \"191yAZD9fQAt0mDKPBfSnU3aYr4=\");\n_c = Adminpanel;\nvar _c;\n$RefreshReg$(_c, \"Adminpanel\");","map":{"version":3,"names":["React","useState","useEffect","axios","Card","jsxDEV","_jsxDEV","Adminpanel","_s","title","setTitle","file","setFile","alertMessage","setAlertMessage","uploadedFiles","setUploadedFiles","fetchPdfs","response","get","status","console","log","data","error","onSubmit","e","preventDefault","formData","FormData","append","token","localStorage","getItem","result","post","headers","Authorization","updatedFiles","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","value","onChange","target","htmlFor","files","length","map","index","Fragment","pdf","_c","$RefreshReg$"],"sources":["C:/Users/HP/Desktop/pen_down/pen/src/Components/Adminpanel.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport Card from './card';\r\n\r\nexport default function Adminpanel() {\r\n  const [title, setTitle] = useState(\"\");\r\n  const [file, setFile] = useState(null);\r\n  const [alertMessage, setAlertMessage] = useState(\"\");\r\n  const [uploadedFiles, setUploadedFiles] = useState([]);  // List of PDFs fetched from the backend\r\n\r\n  // Fetch list of uploaded PDFs when the component mounts\r\n  useEffect(() => {\r\n    const fetchPdfs = async () => {\r\n      try {\r\n        const response = await axios.get('http://localhost:9029/api/user/pdf');\r\n        \r\n        if (response.status === 200) {\r\n          console.log('Fetched files:', response.data);  // Debugging: log the fetched data\r\n          setUploadedFiles(response.data);  // Assuming the response is an array of files\r\n        } else {\r\n          console.error('Failed to fetch files:', response);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error fetching uploaded files:', error);\r\n      }\r\n    };\r\n\r\n    fetchPdfs();\r\n  }, []);  // Runs once when the component mounts\r\n\r\n  // Handle form submission for file upload\r\n  const onSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!file) {\r\n      setAlertMessage(\"Please select a file to upload.\");\r\n      return;\r\n    }\r\n\r\n    const formData = new FormData();\r\n    formData.append('title', title);\r\n    formData.append('file', file);\r\n\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n      setAlertMessage(\"Token not found. Please log in.\");\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await axios.post(\r\n        'http://localhost:9029/api/user/upload-pdf',\r\n        formData,\r\n        {\r\n          headers: {\r\n            'Content-Type': 'multipart/form-data',\r\n            Authorization: `Bearer ${token}`,\r\n          },\r\n        }\r\n      );\r\n      console.log('Upload successful:', result.data);\r\n      setAlertMessage(\"Your file has been uploaded successfully!\");\r\n      setTitle(\"\");\r\n      setFile(null);\r\n\r\n      // Re-fetch uploaded files to update the list after a successful upload\r\n      const updatedFiles = await axios.get('http://localhost:9029/api/user/pdf', {\r\n        headers: {\r\n          Authorization: `Bearer ${token}`,\r\n        },\r\n      });\r\n      setUploadedFiles(updatedFiles.data);\r\n    } catch (error) {\r\n      console.error('Error uploading PDF:', error);\r\n      setAlertMessage(\"Error uploading PDF.\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='container'>\r\n      <h1>Upload Notes Here</h1>\r\n\r\n      {/* Display alert message */}\r\n      {alertMessage && <div className=\"alert alert-success\">{alertMessage}</div>}\r\n\r\n      <div className=\"form-floating mb-3\">\r\n        <input \r\n          type=\"text\" \r\n          className=\"form-control\" \r\n          id=\"floatingInput\" \r\n          placeholder=\"Title\" \r\n          value={title}\r\n          onChange={(e) => setTitle(e.target.value)}\r\n        />\r\n        <label htmlFor=\"floatingInput\">Enter PDF title</label>\r\n      </div>\r\n\r\n      <form className=\"row g-3\" onSubmit={onSubmit}>\r\n        <div className=\"col-auto\">\r\n          <label htmlFor=\"fileInput\">Select file for upload</label>\r\n          <input \r\n            type=\"file\" \r\n            className=\"form-control\" \r\n            id=\"fileInput\" \r\n            onChange={(e) => setFile(e.target.files[0])}\r\n          />\r\n        </div>\r\n        <button type=\"submit\" className=\"btn btn-primary\">Upload</button>\r\n      </form>\r\n\r\n      {/* Display list of uploaded files */}\r\n      <h2 className='mt-4'>Uploaded Files:</h2>\r\n      {uploadedFiles.length > 0 ? (\r\n        <ul className=\"list-group\">\r\n          {uploadedFiles.map((file, index) => (\r\n            <React.Fragment key={index}>\r\n              <Card title={file.title} pdf={file.pdf} />  {/* Assuming file.pdf contains the PDF filename */}\r\n              <br />\r\n            </React.Fragment>\r\n          ))}\r\n        </ul>\r\n      ) : (\r\n        <p>No files uploaded yet.</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}